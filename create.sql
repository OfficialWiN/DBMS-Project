USE DBMS
DECLARE @Sql NVARCHAR(500) DECLARE @Cursor CURSOR
SET @Cursor = CURSOR FAST_FORWARD FOR
SELECT DISTINCT sql = 'ALTER TABLE [' + tc2.TABLE_SCHEMA + '].[' +  tc2.TABLE_NAME + '] DROP [' + rc1.CONSTRAINT_NAME + '];'
FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS rc1
LEFT JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc2 ON tc2.CONSTRAINT_NAME =rc1.CONSTRAINT_NAME
OPEN @Cursor FETCH NEXT FROM @Cursor INTO @Sql
WHILE (@@FETCH_STATUS = 0)
  BEGIN
    Exec sp_executesql @Sql
    FETCH NEXT FROM @Cursor INTO @Sql
  END
  CLOSE @Cursor DEALLOCATE @Cursor
  EXEC sp_MSforeachtable 'DROP TABLE ?'
  CREATE TABLE JOB_DETAILS
  (
    JOB_ID int NOT NULL IDENTITY(1,1) PRIMARY KEY,
    LOCATION VARCHAR(100) NOT NULL,
    JOB_TITLE VARCHAR(100) NOT NULL,
    FILLED bit NOT NULL default 'FALSE'
  );
  CREATE TABLE JOB_ROLE
  (
    JOB_TITLE VARCHAR(100) PRIMARY KEY,
    JOB_DESCRIPTION  VARCHAR(8000)
  )
  CREATE TABLE CANDIDATE
  (
    CANDIDATE_ID int NOT NULL PRIMARY KEY IDENTITY(1,1),
    STATUS VARCHAR(100) CHECK (STATUS IN ('ONGOING','REJECTED','ACCEPTED','entry recieved')),
    EXPERIENCE VARCHAR(100),
    NAME VARCHAR(100) NOT NULL,
    AGE INT NOT NULL,
    EDUCATION VARCHAR(8000),
    ROLE int FOREIGN KEY REFERENCES JOB_DETAILS(JOB_ID) ON DELETE SET NULL
  );
  CREATE TABLE SKILLS
  (
    CANDIDATE_ID int NOT NULL FOREIGN KEY REFERENCES CANDIDATE(CANDIDATE_ID) ON DELETE CASCADE,
    SKILL_NAME VARCHAR(100) NOT NULL,
    LEVEL INT,
    PRIMARY KEY(CANDIDATE_ID, SKILL_NAME)
  );
  CREATE TABLE EMPLOYEE
  (
    EMPLOYEE_ID int NOT NULL PRIMARY KEY IDENTITY(1,1),
    EMPLOYEE_NAME VARCHAR(100) NOT NULL,
    EMPLOYEE_AGE INT,
    EMPLOYEE_POSITION int NOT NULL FOREIGN KEY REFERENCES JOB_DETAILS(JOB_ID),
    START_DATE date 
  );


  CREATE TABLE INTERVIEWER
  (
    INTERVIEWER_ID int  NOT NULL PRIMARY KEY IDENTITY(1,1),
    EMPLOYEE_ID int NOT NULL UNIQUE FOREIGN KEY REFERENCES EMPLOYEE(EMPLOYEE_ID) ON DELETE CASCADE,   
  );
  CREATE TABLE QUESTION
  (
    QUESTION_ID int NOT NULL PRIMARY KEY IDENTITY(1,1),
    QUESTION_DESCRIPTION VARCHAR(100) NOT NULL,
  );
  CREATE TABLE QUESTION_TAGS
  (
    QUESTION_ID int FOREIGN KEY REFERENCES QUESTION(QUESTION_ID),
    TAGS VARCHAR(100),
    PRIMARY KEY(QUESTION_ID,TAGS)
  );
  CREATE TABLE QUESTION_EXPLANATION
  ( 
    QUESTION_ID int NOT NULL FOREIGN KEY REFERENCES QUESTION(QUESTION_ID) ON DELETE CASCADE PRIMARY KEY,
    EXPLANATION VARCHAR(100)
  );
  CREATE TABLE QUESTION_DIFFICULTY
  (
    QUESTION_ID int NOT NULL FOREIGN KEY REFERENCES QUESTION(QUESTION_ID) ON DELETE CASCADE PRIMARY KEY,
    DIFFICULTY VARCHAR(8000)
  );
  CREATE TABLE INTERVIEW
  (
    INTERVIEW_ID int NOT NULL PRIMARY KEY IDENTITY(1,1),
    CANDIDATE_ID int NOT NULL FOREIGN KEY REFERENCES CANDIDATE(CANDIDATE_ID) ON DELETE CASCADE ON UPDATE CASCADE ,
    INTERVIEWER_ID int  NOT NULL FOREIGN KEY REFERENCES INTERVIEWER(INTERVIEWER_ID) ON DELETE CASCADE ON UPDATE CASCADE ,
    RESULT VARCHAR(20) CHECK(RESULT IN ('SOLVED','UNSOLVED','PARTIALLY SOLVED')),
    SCORE INT CHECK(SCORE>=0 AND SCORE<=10),
  );
  CREATE TABLE MAP
  (
    INTERVIEW_ID int NOT NULL FOREIGN KEY REFERENCES INTERVIEW(INTERVIEW_ID),
    QUESTION_ID int NOT NULL FOREIGN KEY REFERENCES QUESTION(QUESTION_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    PRIMARY KEY(INTERVIEW_ID,QUESTION_ID)
  );

  GO 
  CREATE TRIGGER write_start_date ON EMPLOYEE
  AFTER INSERT
  AS
  BEGIN
    Declare @start_date date;
    Declare @id1 VARCHAR(100);
    select @id1=i.EMPLOYEE_ID from inserted i;
    select @start_date=i.START_DATE from inserted i;
    IF(@start_date IS NULL)
      BEGIN 
        UPDATE EMPLOYEE
        SET START_DATE=GETDATE()
        WHERE EMPLOYEE_ID=@id1;
      END
    END
    GO
    GO
    CREATE TRIGGER make_status ON CANDIDATE
    AFTER INSERT
    AS
    BEGIN
      Declare @status VARCHAR(100);
      Declare @id VARCHAR(100);
      select @id = i.CANDIDATE_ID from inserted i;
      select @status=i.STATUS from inserted i;
      IF(@status IS NULL)
        BEGIN
          UPDATE CANDIDATE
          SET STATUS='entry recieved'
          WHERE CANDIDATE_ID=@id;
        END
      END
      GO
      GO
      CREATE TRIGGER make_employee ON CANDIDATE
      AFTER UPDATE 
      AS
      BEGIN
        Declare @status VARCHAR(10);
        Declare @AGE int;
        Declare @NAME VARCHAR(100);
        Declare @POSITION VARCHAR(15);
        Declare @JOB_ID VARCHAR(100);
        Declare @id VARCHAR(100);
        select @id=i.CANDIDATE_ID from inserted i
        select @status=i.STATUS from inserted i;
        select @AGE=i.AGE from inserted i;
        select @NAME=i.NAME from inserted i;
        select @POSITION=i.ROLE from inserted i;
        IF(@status='accepted')
          BEGIN
            INSERT INTO EMPLOYEE(EMPLOYEE_NAME,EMPLOYEE_AGE,EMPLOYEE_POSITION,START_DATE) VALUES(@NAME,@AGE,@POSITION,GETDATE());
          END
        END
        GO
        GO 
        SELECT*from JOB_DETAILS
        SELECT*from JOB_ROLE
        SELECT*from CANDIDATE
        SELECT*from SKILL_DETAILS
        SELECT*from SKILLS
        SELECT*from EMPLOYEE
        SELECT*from QUESTION
        SELECT*from QUESTION_DIFFICULTY
        SELECT*from QUESTION_EXPLANATION
        SELECT*from INTERVIEWER
        SELECT*from QUESTION_TAGS
        SELECT*from INTERVIEW
        SELECT*from MAP
